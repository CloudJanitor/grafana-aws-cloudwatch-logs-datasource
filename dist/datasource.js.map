{"version":3,"sources":["../src/datasource.js"],"names":["_","TableModel","AwsCloudWatchLogsDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","url","name","id","defaultRegion","jsonData","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","doRequest","doMetricQueryRequest","region","prefix","then","status","message","title","catch","err","datasourceRequest","method","from","range","valueOf","toString","to","queries","res","forEach","result","results","isEmpty","r","series","push","target","s","datapoints","points","tables","table","columns","rows","map","refId","datasourceId","queryType","format","input","logGroupName","replace","scopedVars","filterPattern","interleaved","logGroupNamesQuery","match","logStreamNamesQuery","subtype","parameters","timeRange","extend","transformSuggestDataFromTable","suggestData","text","v","value"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport TableModel from 'app/core/table_model';\n\nexport class AwsCloudWatchLogsDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n  }\n\n  query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.doRequest({\n      data: query\n    });\n  }\n\n  testDatasource() {\n    return this.doMetricQueryRequest('log_group_names', {\n      region: this.defaultRegion,\n      prefix: 'test'\n    }).then(res => {\n      return this.q.when({ status: \"success\", message: \"Data source is working\", title: \"Success\" });\n    }).catch(err => {\n      return { status: \"error\", message: err.message, title: \"Error\" };\n    });\n  }\n\n  doRequest(options) {\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.data.range.from.valueOf().toString(),\n        to: options.data.range.to.valueOf().toString(),\n        queries: options.data.targets,\n      }\n    }).then(result => {\n      let res = [];\n      _.forEach(result.data.results, r => {\n        if (!_.isEmpty(r.series)) {\n          _.forEach(r.series, s => {\n            res.push({ target: s.name, datapoints: s.points });\n          })\n        }\n        if (!_.isEmpty(r.tables)) {\n          _.forEach(r.tables, t => {\n            let table = new TableModel()\n            table.columns = t.columns\n            table.rows = t.rows\n            res.push(table);\n          })\n        }\n      })\n\n      result.data = res;\n      return result;\n    });\n  }\n\n  buildQueryParameters(options) {\n    let targets = _.map(options.targets, target => {\n      return {\n        refId: target.refId,\n        hide: target.hide,\n        datasourceId: this.id,\n        queryType: 'timeSeriesQuery',\n        format: target.type || 'timeserie',\n        region: target.region || this.defaultRegion,\n        input: {\n          logGroupName: this.templateSrv.replace(target.logGroupName, options.scopedVars),\n          filterPattern: this.templateSrv.replace(target.filterPattern, options.scopedVars),\n          interleaved: false\n        }\n      };\n    });\n\n    options.targets = targets;\n    return options;\n  }\n\n  metricFindQuery(query) {\n    let region;\n\n    let logGroupNamesQuery = query.match(/^log_group_names\\(([^,]+?),\\s?(.+)\\)/);\n    if (logGroupNamesQuery) {\n      region = logGroupNamesQuery[1];\n      let prefix = logGroupNamesQuery[2];\n      return this.doMetricQueryRequest('log_group_names', {\n        region: this.templateSrv.replace(region),\n        prefix: this.templateSrv.replace(prefix)\n      });\n    }\n\n    let logStreamNamesQuery = query.match(/^log_stream_names\\(([^,]+?),\\s?(.+)\\)/);\n    if (logStreamNamesQuery) {\n      region = logStreamNamesQuery[1];\n      let logGroupName = logStreamNamesQuery[2];\n      return this.doMetricQueryRequest('log_stream_names', {\n        region: this.templateSrv.replace(region),\n        logGroupName: this.templateSrv.replace(logGroupName)\n      });\n    }\n\n\n    return this.$q.when([]);\n  }\n\n  doMetricQueryRequest(subtype, parameters) {\n    var range = this.timeSrv.timeRange();\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: range.from.valueOf().toString(),\n        to: range.to.valueOf().toString(),\n        queries: [\n          _.extend(\n            {\n              refId: 'metricFindQuery',\n              datasourceId: this.id,\n              queryType: 'metricFindQuery',\n              subtype: subtype,\n            },\n            parameters\n          ),\n        ],\n      }\n    }).then(r => {\n      return this.transformSuggestDataFromTable(r.data);\n    });\n  }\n\n  transformSuggestDataFromTable(suggestData) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n      };\n    });\n  }\n}\n"]}