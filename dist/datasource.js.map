{"version":3,"sources":["../src/datasource.js"],"names":["_","TableModel","flatten","AwsCloudWatchLogsDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","url","name","id","defaultRegion","jsonData","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","doRequest","doMetricQueryRequest","region","logGroupNamePrefix","then","status","message","title","catch","err","datasourceRequest","method","from","range","valueOf","toString","to","queries","res","forEach","result","results","isEmpty","r","series","push","target","s","datapoints","points","tables","expandMessageField","map","input","logGroupName","replace","scopedVars","logStreamNames","n","filterPattern","interleaved","refId","datasourceId","queryType","format","originalTable","table","i","j","metricLabels","rows","columns","messageIndex","findIndex","c","text","messages","messageJson","JSON","parse","each","slice","flattened","propName","sortedLabels","keys","sort","label","labelIndex","reordered","get","logGroupNamesQuery","match","prefix","logStreamNamesQuery","logStreamNamePrefix","subtype","parameters","timeRange","extend","transformSuggestDataFromTable","suggestData","v","value","annotation","tagKeys","split","titleFormat","textFormat","Promise","resolve","meta","Events","eventList","event","Message","tags","chain","k","includes","time","Timestamp","renderTemplate","aliasPattern","aliasData","aliasRegex","g1"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;AACAC,gB;;AACAC,a;;;;;;;;;;;;;;;;;;;;;6CAEMC,2B;AACX,6CAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2DC,OAA3D,EAAoE;AAAA;;AAClE,eAAKC,IAAL,GAAYL,iBAAiBK,IAA7B;AACA,eAAKC,GAAL,GAAWN,iBAAiBM,GAA5B;AACA,eAAKC,IAAL,GAAYP,iBAAiBO,IAA7B;AACA,eAAKC,EAAL,GAAUR,iBAAiBQ,EAA3B;AACA,eAAKC,aAAL,GAAqBT,iBAAiBU,QAAjB,CAA0BD,aAA/C;AACA,eAAKE,CAAL,GAASV,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACA,eAAKC,OAAL,GAAeA,OAAf;AACD;;;;gCAEKQ,O,EAAS;AACb,gBAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;AACAC,kBAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,qBAAK,CAACC,EAAEC,IAAR;AAAA,aAArB,CAAhB;;AAEA,gBAAIL,MAAME,OAAN,CAAcI,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,qBAAO,KAAKR,CAAL,CAAOS,IAAP,CAAY,EAAEC,MAAM,EAAR,EAAZ,CAAP;AACD;;AAED,mBAAO,KAAKC,SAAL,CAAe;AACpBD,oBAAMR;AADc,aAAf,CAAP;AAGD;;;2CAEgB;AAAA;;AACf,mBAAO,KAAKU,oBAAL,CAA0B,iBAA1B,EAA6C;AAClDC,sBAAQ,KAAKf,aADqC;AAElDgB,kCAAoB;AAF8B,aAA7C,EAGJC,IAHI,CAGC,eAAO;AACb,qBAAO,MAAKf,CAAL,CAAOS,IAAP,CAAY,EAAEO,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAZ,CAAP;AACD,aALM,EAKJC,KALI,CAKE,eAAO;AACd,qBAAO,EAAEH,QAAQ,OAAV,EAAmBC,SAASG,IAAIH,OAAhC,EAAyCC,OAAO,OAAhD,EAAP;AACD,aAPM,CAAP;AAQD;;;oCAESjB,O,EAAS;AAAA;;AACjB,mBAAO,KAAKV,UAAL,CAAgB8B,iBAAhB,CAAkC;AACvC1B,mBAAK,iBADkC;AAEvC2B,sBAAQ,MAF+B;AAGvCZ,oBAAM;AACJa,sBAAMtB,QAAQS,IAAR,CAAac,KAAb,CAAmBD,IAAnB,CAAwBE,OAAxB,GAAkCC,QAAlC,EADF;AAEJC,oBAAI1B,QAAQS,IAAR,CAAac,KAAb,CAAmBG,EAAnB,CAAsBF,OAAtB,GAAgCC,QAAhC,EAFA;AAGJE,yBAAS3B,QAAQS,IAAR,CAAaN;AAHlB;AAHiC,aAAlC,EAQJW,IARI,CAQC,kBAAU;AAChB,kBAAIc,MAAM,EAAV;AACA5C,gBAAE6C,OAAF,CAAUC,OAAOrB,IAAP,CAAYsB,OAAtB,EAA+B,aAAK;AAClC,oBAAI,CAAC/C,EAAEgD,OAAF,CAAUC,EAAEC,MAAZ,CAAL,EAA0B;AACxBlD,oBAAE6C,OAAF,CAAUI,EAAEC,MAAZ,EAAoB,aAAK;AACvBN,wBAAIO,IAAJ,CAAS,EAAEC,QAAQC,EAAE1C,IAAZ,EAAkB2C,YAAYD,EAAEE,MAAhC,EAAT;AACD,mBAFD;AAGD;AACD,oBAAI,CAACvD,EAAEgD,OAAF,CAAUC,EAAEO,MAAZ,CAAL,EAA0B;AACxBxD,oBAAE6C,OAAF,CAAUI,EAAEO,MAAZ,EAAoB,aAAK;AACvBZ,wBAAIO,IAAJ,CAAS,OAAKM,kBAAL,CAAwBpC,CAAxB,CAAT;AACD,mBAFD;AAGD;AACF,eAXD;;AAaAyB,qBAAOrB,IAAP,GAAcmB,GAAd;AACA,qBAAOE,MAAP;AACD,aAzBM,CAAP;AA0BD;;;+CAEoB9B,O,EAAS;AAAA;;AAC5B,gBAAIG,UAAUnB,EAAE0D,GAAF,CAAM1C,QAAQG,OAAd,EAAuB,kBAAU;AAC7C,kBAAIwC,QAAQ;AACVC,8BAAc,OAAKrD,WAAL,CAAiBsD,OAAjB,CAAyBT,OAAOQ,YAAhC,EAA8C5C,QAAQ8C,UAAtD,CADJ;AAEVC,gCAAgBX,OAAOW,cAAP,CAAsB3C,MAAtB,CAA6B,aAAK;AAAE,yBAAO4C,MAAM,EAAb;AAAkB,iBAAtD,EAAwDN,GAAxD,CAA4D,aAAK;AAAE,yBAAO,OAAKnD,WAAL,CAAiBsD,OAAjB,CAAyBG,CAAzB,EAA4BhD,QAAQ8C,UAApC,CAAP;AAAyD,iBAA5H,CAFN;AAGVG,+BAAe,OAAK1D,WAAL,CAAiBsD,OAAjB,CAAyBT,OAAOa,aAAhC,EAA+CjD,QAAQ8C,UAAvD,CAHL;AAIVI,6BAAa;AAJH,eAAZ;AAMA,kBAAIP,MAAMI,cAAN,CAAqBxC,MAArB,KAAgC,CAApC,EAAuC;AACrC,uBAAOoC,MAAMI,cAAb;AACD;AACD,qBAAO;AACLI,uBAAOf,OAAOe,KADT;AAEL7C,sBAAM8B,OAAO9B,IAFR;AAGL8C,8BAAc,OAAKxD,EAHd;AAILyD,2BAAW,iBAJN;AAKLC,wBAAQlB,OAAO3C,IAAP,IAAe,WALlB;AAMLmB,wBAAQ,OAAKrB,WAAL,CAAiBsD,OAAjB,CAAyBT,OAAOxB,MAAhC,EAAwCZ,QAAQ8C,UAAhD,KAA+D,OAAKjD,aANvE;AAOL8C,uBAAOA;AAPF,eAAP;AASD,aAnBa,CAAd;;AAqBA3C,oBAAQG,OAAR,GAAkBA,OAAlB;AACA,mBAAOH,OAAP;AACD;;;6CAEkBuD,a,EAAe;AAChC,gBAAIC,QAAQ,IAAIvE,UAAJ,EAAZ;AACA,gBAAIwE,CAAJ,EAAOC,CAAP;AACA,gBAAIC,eAAe,EAAnB;;AAEA,gBAAIJ,cAAcK,IAAd,CAAmBrD,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,qBAAOiD,KAAP;AACD;AACDA,kBAAMK,OAAN,GAAgBN,cAAcM,OAA9B;;AAEA;AACA,gBAAIC,eAAeN,MAAMK,OAAN,CAAcE,SAAd,CAAwB,aAAK;AAC9C,qBAAOC,EAAEC,IAAF,KAAW,SAAlB;AACD,aAFkB,CAAnB;AAGA,gBAAIC,WAAWX,cAAcK,IAAd,CAAmBlB,GAAnB,CAAuB,aAAK;AACzC,kBAAIyB,cAAc,EAAlB;AACA,kBAAI;AACF,oBAAIlC,EAAE6B,YAAF,EAAgB,CAAhB,MAAuB,GAA3B,EAAgC;AAC9BK,gCAAcC,KAAKC,KAAL,CAAWpC,EAAE6B,YAAF,CAAX,CAAd;AACD;AACF,eAJD,CAIE,OAAO3C,GAAP,EAAY;AACZ;AACD;AACD,qBAAOgD,WAAP;AACD,aAVc,CAAf;AAWAnF,cAAEsF,IAAF,CAAOJ,SAASK,KAAT,CAAe,CAAf,EAAkB,GAAlB,CAAP,EAA+B,UAACvD,OAAD,EAAa;AAC1C,kBAAIwD,YAAYtF,QAAQ8B,OAAR,EAAiB,IAAjB,CAAhB;AACA,mBAAK,IAAIyD,QAAT,IAAqBD,SAArB,EAAgC;AAC9Bb,6BAAac,QAAb,IAAyB,CAAzB;AACD;AACF,aALD;;AAOA;AACA,gBAAIC,eAAe1F,EAAE2F,IAAF,CAAOhB,YAAP,EAAqBiB,IAArB,EAAnB;AACA5F,cAAEsF,IAAF,CAAOI,YAAP,EAAqB,UAAUG,KAAV,EAAiBC,UAAjB,EAA6B;AAChDnB,2BAAakB,KAAb,IAAsBC,aAAa,CAAnC;AACAtB,oBAAMK,OAAN,CAAc1B,IAAd,CAAmB,EAAE8B,MAAMY,KAAR,EAAnB;AACD,aAHD;;AAKA;AACA,iBAAKpB,IAAI,CAAT,EAAYA,IAAIF,cAAcK,IAAd,CAAmBrD,MAAnC,EAA2CkD,GAA3C,EAAgD;AAC9C,kBAAIsB,YAAYxB,cAAcK,IAAd,CAAmBH,CAAnB,CAAhB;AACA,kBAAIzC,UAAUkD,SAAST,CAAT,CAAd;AACA,mBAAKC,IAAI,CAAT,EAAYA,IAAIgB,aAAanE,MAA7B,EAAqCmD,GAArC,EAA0C;AACxC,oBAAImB,QAAQH,aAAahB,CAAb,CAAZ;AACAqB,0BAAU5C,IAAV,CAAenD,EAAEgG,GAAF,CAAMhE,OAAN,EAAe6D,KAAf,KAAyB,EAAxC;AACD;AACDrB,oBAAMI,IAAN,CAAWzB,IAAX,CAAgB4C,SAAhB;AACD;;AAED,mBAAOvB,KAAP;AACD;;;0CAEevD,K,EAAO;AACrB,gBAAIW,eAAJ;;AAEA,gBAAIqE,qBAAqBhF,MAAMiF,KAAN,CAAY,sCAAZ,CAAzB;AACA,gBAAID,kBAAJ,EAAwB;AACtBrE,uBAASqE,mBAAmB,CAAnB,CAAT;AACA,kBAAIE,SAASF,mBAAmB,CAAnB,CAAb;AACA,qBAAO,KAAKtE,oBAAL,CAA0B,iBAA1B,EAA6C;AAClDC,wBAAQ,KAAKrB,WAAL,CAAiBsD,OAAjB,CAAyBjC,MAAzB,CAD0C;AAElDC,oCAAoB,KAAKtB,WAAL,CAAiBsD,OAAjB,CAAyBsC,MAAzB;AAF8B,eAA7C,CAAP;AAID;;AAED,gBAAIC,sBAAsBnF,MAAMiF,KAAN,CAAY,uCAAZ,CAA1B;AACA,gBAAIE,mBAAJ,EAAyB;AACvBxE,uBAASwE,oBAAoB,CAApB,CAAT;AACA,kBAAIxC,eAAewC,oBAAoB,CAApB,CAAnB;AACA,qBAAO,KAAKzE,oBAAL,CAA0B,kBAA1B,EAA8C;AACnDC,wBAAQ,KAAKrB,WAAL,CAAiBsD,OAAjB,CAAyBjC,MAAzB,CAD2C;AAEnDgC,8BAAc,KAAKrD,WAAL,CAAiBsD,OAAjB,CAAyBD,YAAzB,CAFqC;AAGnDyC,qCAAqB;AAH8B,eAA9C,CAAP;AAKD;;AAGD,mBAAO,KAAKhG,EAAL,CAAQmB,IAAR,CAAa,EAAb,CAAP;AACD;;;+CAEoB8E,O,EAASC,U,EAAY;AAAA;;AACxC,gBAAIhE,QAAQ,KAAK/B,OAAL,CAAagG,SAAb,EAAZ;AACA,mBAAO,KAAKlG,UAAL,CAAgB8B,iBAAhB,CAAkC;AACvC1B,mBAAK,iBADkC;AAEvC2B,sBAAQ,MAF+B;AAGvCZ,oBAAM;AACJa,sBAAMC,MAAMD,IAAN,CAAWE,OAAX,GAAqBC,QAArB,EADF;AAEJC,oBAAIH,MAAMG,EAAN,CAASF,OAAT,GAAmBC,QAAnB,EAFA;AAGJE,yBAAS,CACP3C,EAAEyG,MAAF,CACE;AACEtC,yBAAO,iBADT;AAEEC,gCAAc,KAAKxD,EAFrB;AAGEyD,6BAAW,iBAHb;AAIEiC,2BAASA;AAJX,iBADF,EAOEC,UAPF,CADO;AAHL;AAHiC,aAAlC,EAkBJzE,IAlBI,CAkBC,aAAK;AACX,qBAAO,OAAK4E,6BAAL,CAAmCzD,EAAExB,IAArC,CAAP;AACD,aApBM,CAAP;AAqBD;;;wDAE6BkF,W,EAAa;AACzC,mBAAO3G,EAAE0D,GAAF,CAAMiD,YAAY5D,OAAZ,CAAoB,iBAApB,EAAuCS,MAAvC,CAA8C,CAA9C,EAAiDoB,IAAvD,EAA6D,aAAK;AACvE,qBAAO;AACLK,sBAAM2B,EAAE,CAAF,CADD;AAELC,uBAAOD,EAAE,CAAF;AAFF,eAAP;AAID,aALM,CAAP;AAMD;;;0CAEe5F,O,EAAS;AAAA;;AACvB,gBAAI8F,aAAa9F,QAAQ8F,UAAzB;AACA,gBAAIlF,SAASkF,WAAWlF,MAAX,IAAqB,KAAKf,aAAvC;AACA,gBAAI+C,eAAekD,WAAWlD,YAAX,IAA2B,EAA9C;AACA,gBAAIK,gBAAgB6C,WAAW7C,aAAX,IAA4B,EAAhD;AACA,gBAAI8C,UAAUD,WAAWC,OAAX,IAAsB,EAApC;AACAA,sBAAUA,QAAQC,KAAR,CAAc,GAAd,CAAV;AACA,gBAAIC,cAAcH,WAAWG,WAAX,IAA0B,EAA5C;AACA,gBAAIC,aAAaJ,WAAWI,UAAX,IAAyB,EAA1C;;AAEA,gBAAIlH,EAAEgD,OAAF,CAAUpB,MAAV,KAAqB5B,EAAEgD,OAAF,CAAUY,YAAV,CAAzB,EAAkD;AAAE,qBAAOuD,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AAA6B;;AAEjF,gBAAI7E,QAAQ,KAAK/B,OAAL,CAAagG,SAAb,EAAZ;AACA,mBAAO,KAAKlG,UAAL,CAAgB8B,iBAAhB,CAAkC;AACvC1B,mBAAK,iBADkC;AAEvC2B,sBAAQ,MAF+B;AAGvCZ,oBAAM;AACJa,sBAAMC,MAAMD,IAAN,CAAWE,OAAX,GAAqBC,QAArB,EADF;AAEJC,oBAAIH,MAAMG,EAAN,CAASF,OAAT,GAAmBC,QAAnB,EAFA;AAGJE,yBAAS,CACP;AACEwB,yBAAO,iBADT;AAEEC,gCAAc,KAAKxD,EAFrB;AAGEyD,6BAAW,iBAHb;AAIEzC,0BAAQ,KAAKrB,WAAL,CAAiBsD,OAAjB,CAAyBjC,MAAzB,CAJV;AAKE+B,yBAAO;AACLC,kCAAc,KAAKrD,WAAL,CAAiBsD,OAAjB,CAAyBD,YAAzB,CADT;AAELK,mCAAe,KAAK1D,WAAL,CAAiBsD,OAAjB,CAAyBI,aAAzB,CAFV;AAGLC,iCAAa;AAHR;AALT,iBADO;AAHL;AAHiC,aAAlC,EAoBJpC,IApBI,CAoBC,aAAK;AACX,kBAAI,CAACmB,EAAExB,IAAF,CAAOsB,OAAP,CAAe,EAAf,EAAmBsE,IAAnB,CAAwBC,MAA7B,EAAqC;AACnC,uBAAO,EAAP;AACD;AACD,kBAAIC,YAAYtE,EAAExB,IAAF,CAAOsB,OAAP,CAAe,EAAf,EAAmBsE,IAAnB,CAAwBC,MAAxB,CAA+B5D,GAA/B,CAAmC,UAAC8D,KAAD,EAAW;AAC5D,oBAAIrC,cAAcC,KAAKC,KAAL,CAAWmC,MAAMC,OAAjB,CAAlB;AACA,oBAAIC,OAAO1H,EAAE2H,KAAF,CAAQxC,WAAR,EACR/D,MADQ,CACD,UAACwF,CAAD,EAAIgB,CAAJ,EAAU;AAChB,yBAAO5H,EAAE6H,QAAF,CAAWd,OAAX,EAAoBa,CAApB,CAAP;AACD,iBAHQ,EAGNf,KAHM,EAAX;;AAKA,uBAAO;AACLC,8BAAYA,UADP;AAELgB,wBAAMN,MAAMO,SAFP;AAGL9F,yBAAO,OAAK+F,cAAL,CAAoBf,WAApB,EAAiC9B,WAAjC,CAHF;AAILuC,wBAAMA,IAJD;AAKLzC,wBAAM,OAAK+C,cAAL,CAAoBd,UAApB,EAAgC/B,WAAhC;AALD,iBAAP;AAOD,eAde,CAAhB;;AAgBA,qBAAOoC,SAAP;AACD,aAzCM,CAAP;AA0CD;;;yCAEcU,Y,EAAcC,S,EAAW;AACtC,gBAAIC,aAAa,sBAAjB;AACA,mBAAOF,aAAapE,OAAb,CAAqBsE,UAArB,EAAiC,UAAUjC,KAAV,EAAiBkC,EAAjB,EAAqB;AAC3D,kBAAIF,UAAUE,EAAV,CAAJ,EAAmB;AACjB,uBAAOF,UAAUE,EAAV,CAAP;AACD;AACD,qBAAOA,EAAP;AACD,aALM,CAAP;AAMD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport TableModel from 'app/core/table_model';\nimport flatten from 'app/core/utils/flatten';\n\nexport class AwsCloudWatchLogsDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n  }\n\n  query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.doRequest({\n      data: query\n    });\n  }\n\n  testDatasource() {\n    return this.doMetricQueryRequest('log_group_names', {\n      region: this.defaultRegion,\n      logGroupNamePrefix: 'test'\n    }).then(res => {\n      return this.q.when({ status: \"success\", message: \"Data source is working\", title: \"Success\" });\n    }).catch(err => {\n      return { status: \"error\", message: err.message, title: \"Error\" };\n    });\n  }\n\n  doRequest(options) {\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.data.range.from.valueOf().toString(),\n        to: options.data.range.to.valueOf().toString(),\n        queries: options.data.targets,\n      }\n    }).then(result => {\n      let res = [];\n      _.forEach(result.data.results, r => {\n        if (!_.isEmpty(r.series)) {\n          _.forEach(r.series, s => {\n            res.push({ target: s.name, datapoints: s.points });\n          })\n        }\n        if (!_.isEmpty(r.tables)) {\n          _.forEach(r.tables, t => {\n            res.push(this.expandMessageField(t));\n          })\n        }\n      })\n\n      result.data = res;\n      return result;\n    });\n  }\n\n  buildQueryParameters(options) {\n    let targets = _.map(options.targets, target => {\n      let input = {\n        logGroupName: this.templateSrv.replace(target.logGroupName, options.scopedVars),\n        logStreamNames: target.logStreamNames.filter(n => { return n !== \"\"; }).map(n => { return this.templateSrv.replace(n, options.scopedVars); }),\n        filterPattern: this.templateSrv.replace(target.filterPattern, options.scopedVars),\n        interleaved: false\n      };\n      if (input.logStreamNames.length === 0) {\n        delete input.logStreamNames;\n      }\n      return {\n        refId: target.refId,\n        hide: target.hide,\n        datasourceId: this.id,\n        queryType: 'timeSeriesQuery',\n        format: target.type || 'timeserie',\n        region: this.templateSrv.replace(target.region, options.scopedVars) || this.defaultRegion,\n        input: input\n      };\n    });\n\n    options.targets = targets;\n    return options;\n  }\n\n  expandMessageField(originalTable) {\n    var table = new TableModel();\n    var i, j;\n    var metricLabels = {};\n\n    if (originalTable.rows.length === 0) {\n      return table;\n    }\n    table.columns = originalTable.columns;\n\n    // Collect all labels across all metrics\n    let messageIndex = table.columns.findIndex(c => {\n      return c.text === 'Message';\n    });\n    let messages = originalTable.rows.map(r => {\n      let messageJson = {};\n      try {\n        if (r[messageIndex][0] === '{') {\n          messageJson = JSON.parse(r[messageIndex]);\n        }\n      } catch (err) {\n        // ignore error\n      }\n      return messageJson;\n    })\n    _.each(messages.slice(0, 100), (message) => {\n      let flattened = flatten(message, null);\n      for (let propName in flattened) {\n        metricLabels[propName] = 1;\n      }\n    });\n\n    // Sort metric labels, create columns for them and record their index\n    let sortedLabels = _.keys(metricLabels).sort();\n    _.each(sortedLabels, function (label, labelIndex) {\n      metricLabels[label] = labelIndex + 1;\n      table.columns.push({ text: label });\n    });\n\n    // Populate rows, set value to empty string when label not present.\n    for (i = 0; i < originalTable.rows.length; i++) {\n      let reordered = originalTable.rows[i];\n      let message = messages[i];\n      for (j = 0; j < sortedLabels.length; j++) {\n        let label = sortedLabels[j];\n        reordered.push(_.get(message, label) || '');\n      }\n      table.rows.push(reordered);\n    }\n\n    return table;\n  }\n\n  metricFindQuery(query) {\n    let region;\n\n    let logGroupNamesQuery = query.match(/^log_group_names\\(([^,]+?),\\s?(.+)\\)/);\n    if (logGroupNamesQuery) {\n      region = logGroupNamesQuery[1];\n      let prefix = logGroupNamesQuery[2];\n      return this.doMetricQueryRequest('log_group_names', {\n        region: this.templateSrv.replace(region),\n        logGroupNamePrefix: this.templateSrv.replace(prefix)\n      });\n    }\n\n    let logStreamNamesQuery = query.match(/^log_stream_names\\(([^,]+?),\\s?(.+)\\)/);\n    if (logStreamNamesQuery) {\n      region = logStreamNamesQuery[1];\n      let logGroupName = logStreamNamesQuery[2];\n      return this.doMetricQueryRequest('log_stream_names', {\n        region: this.templateSrv.replace(region),\n        logGroupName: this.templateSrv.replace(logGroupName),\n        logStreamNamePrefix: \"\"\n      });\n    }\n\n\n    return this.$q.when([]);\n  }\n\n  doMetricQueryRequest(subtype, parameters) {\n    var range = this.timeSrv.timeRange();\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: range.from.valueOf().toString(),\n        to: range.to.valueOf().toString(),\n        queries: [\n          _.extend(\n            {\n              refId: 'metricFindQuery',\n              datasourceId: this.id,\n              queryType: 'metricFindQuery',\n              subtype: subtype,\n            },\n            parameters\n          ),\n        ],\n      }\n    }).then(r => {\n      return this.transformSuggestDataFromTable(r.data);\n    });\n  }\n\n  transformSuggestDataFromTable(suggestData) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n      };\n    });\n  }\n\n  annotationQuery(options) {\n    let annotation = options.annotation;\n    let region = annotation.region || this.defaultRegion;\n    let logGroupName = annotation.logGroupName || '';\n    let filterPattern = annotation.filterPattern || '';\n    let tagKeys = annotation.tagKeys || '';\n    tagKeys = tagKeys.split(',');\n    let titleFormat = annotation.titleFormat || '';\n    let textFormat = annotation.textFormat || '';\n\n    if (_.isEmpty(region) || _.isEmpty(logGroupName)) { return Promise.resolve([]); }\n\n    let range = this.timeSrv.timeRange();\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: range.from.valueOf().toString(),\n        to: range.to.valueOf().toString(),\n        queries: [\n          {\n            refId: 'annotationQuery',\n            datasourceId: this.id,\n            queryType: 'annotationQuery',\n            region: this.templateSrv.replace(region),\n            input: {\n              logGroupName: this.templateSrv.replace(logGroupName),\n              filterPattern: this.templateSrv.replace(filterPattern),\n              interleaved: false\n            }\n          }\n        ]\n      }\n    }).then(r => {\n      if (!r.data.results[\"\"].meta.Events) {\n        return [];\n      }\n      let eventList = r.data.results[\"\"].meta.Events.map((event) => {\n        let messageJson = JSON.parse(event.Message);\n        let tags = _.chain(messageJson)\n          .filter((v, k) => {\n            return _.includes(tagKeys, k);\n          }).value();\n\n        return {\n          annotation: annotation,\n          time: event.Timestamp,\n          title: this.renderTemplate(titleFormat, messageJson),\n          tags: tags,\n          text: this.renderTemplate(textFormat, messageJson)\n        };\n      });\n\n      return eventList;\n    });\n  }\n\n  renderTemplate(aliasPattern, aliasData) {\n    var aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return aliasPattern.replace(aliasRegex, function (match, g1) {\n      if (aliasData[g1]) {\n        return aliasData[g1];\n      }\n      return g1;\n    });\n  }\n}\n"]}